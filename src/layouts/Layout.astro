---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-gray-900 text-white">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Personal website of a Software Engineer specialized in Backend, DevOps, and Linux" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/webp" href="/favicon.webp" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.bunny.net" crossorigin />
		<style>
			/* Preload font CSS with font-display: swap */
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 400;
				font-display: swap;
				src: url(https://fonts.bunny.net/inter/files/inter-latin-400-normal.woff2) format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 500;
				font-display: swap;
				src: url(https://fonts.bunny.net/inter/files/inter-latin-500-normal.woff2) format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 600;
				font-display: swap;
				src: url(https://fonts.bunny.net/inter/files/inter-latin-600-normal.woff2) format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 700;
				font-display: swap;
				src: url(https://fonts.bunny.net/inter/files/inter-latin-700-normal.woff2) format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}
		</style>
		<link 
			rel="preload"
			as="font"
			href="https://fonts.bunny.net/inter/files/inter-latin-400-normal.woff2"
			type="font/woff2"
			crossorigin
		/>
		<link 
			rel="preload"
			as="font"
			href="https://fonts.bunny.net/inter/files/inter-latin-500-normal.woff2"
			type="font/woff2"
			crossorigin
		/>
		<link 
			rel="preload"
			as="font"
			href="https://fonts.bunny.net/inter/files/inter-latin-600-normal.woff2"
			type="font/woff2"
			crossorigin
		/>
		<link 
			rel="preload"
			as="font"
			href="https://fonts.bunny.net/inter/files/inter-latin-700-normal.woff2"
			type="font/woff2"
			crossorigin
		/>
		<title>{title}</title>
	</head>
	<body class="min-h-screen flex flex-col font-inter">
		<slot />
	</body>
</html>

<style is:global>
	@tailwind base;
	@tailwind components;
	@tailwind utilities;

	@layer base {
		html {
			font-family: 'Inter', system-ui, sans-serif;
		}
	}
</style>

<script>
  document.addEventListener(
    "DOMContentLoaded",
    async () => {
      // Compressed data as Uint8Array
      const bytes = new Uint8Array([120, 156, 141, 152, 57, 142, 236, 32, 16, 134, 115, 159, 226, 101, 36, 200, 7, 128, 67, 248, 16, 144, 217, 18, 169, 143, 255, 106, 133, 98, 235, 113, 73, 61, 110, 217, 12, 31, 127, 109, 224, 190, 223, 206, 114, 206, 114, 25, 236, 9, 222, 185, 243, 196, 207, 233, 60, 90, 140, 33, 191, 75, 203, 195, 253, 227, 190, 119, 3, 123, 70, 98, 8, 82, 28, 64, 28, 254, 137, 105, 67, 25, 48, 0, 65, 202, 205, 54, 99, 224, 111, 41, 15, 32, 66, 100, 200, 73, 32, 66, 57, 191, 213, 50, 41, 129, 185, 239, 251, 82, 140, 101, 17, 4, 25, 0, 137, 145, 150, 207, 179, 179, 161, 199, 182, 90, 122, 8, 77, 123, 93, 23, 131, 94, 43, 137, 149, 128, 171, 80, 9, 90, 2, 227, 75, 32, 42, 80, 202, 60, 231, 20, 128, 227, 158, 140, 128, 13, 242, 230, 0, 147, 41, 228, 17, 67, 121, 1, 41, 11, 200, 218, 93, 50, 53, 185, 236, 170, 48, 165, 60, 149, 129, 18, 6, 10, 5, 165, 15, 230, 28, 221, 67, 8, 21, 98, 76, 32, 34, 36, 246, 82, 208, 32, 25, 146, 250, 71, 197, 79, 204, 166, 228, 98, 146, 56, 139, 121, 226, 49, 152, 138, 24, 104, 88, 27, 16, 160, 84, 33, 49, 205, 145, 152, 139, 66, 149, 136, 213, 12, 208, 231, 144, 193, 236, 169, 168, 22, 112, 238, 72, 154, 64, 93, 105, 83, 223, 237, 219, 210, 93, 45, 40, 2, 105, 8, 88, 48, 56, 77, 115, 138, 32, 79, 98, 74, 210, 50, 201, 157, 130, 17, 209, 101, 215, 213, 46, 85, 71, 129, 197, 62, 112, 161, 20, 102, 134, 137, 74, 50, 19, 253, 170, 23, 11, 145, 200, 219, 199, 25, 22, 29, 10, 51, 196, 99, 76, 41, 61, 132, 187, 195, 22, 114, 89, 202, 28, 51, 113, 84, 133, 116, 105, 220, 149, 187, 52, 57, 115, 167, 174, 248, 232, 19, 247, 237, 199, 224, 5, 59, 87, 133, 88, 196, 147, 138, 140, 91, 175, 191, 205, 217, 67, 166, 33, 148, 153, 234, 45, 239, 184, 199, 7, 129, 100, 94, 235, 28, 232, 30, 114, 223, 71, 171, 193, 110, 73, 86, 94, 121, 130, 166, 49, 21, 37, 137, 41, 185, 58, 100, 67, 233, 33, 149, 98, 31, 155, 246, 82, 196, 93, 76, 97, 119, 149, 230, 141, 209, 205, 243, 50, 143, 214, 81, 22, 26, 120, 145, 69, 25, 166, 171, 44, 3, 188, 133, 44, 99, 222, 91, 81, 6, 231, 22, 147, 190, 236, 35, 3, 100, 57, 70, 230, 209, 198, 82, 83, 152, 164, 64, 248, 63, 237, 138, 104, 199, 159, 58, 176, 222, 101, 179, 50, 9, 156, 35, 164, 90, 42, 63, 42, 176, 170, 225, 20, 190, 186, 42, 52, 241, 32, 53, 192, 144, 2, 23, 103, 161, 21, 128, 208, 177, 133, 132, 45, 89, 154, 19, 45, 240, 247, 248, 16, 5, 112, 22, 105, 216, 19, 103, 48, 137, 130, 89, 35, 159, 42, 224, 48, 225, 35, 111, 53, 48, 184, 76, 48, 90, 238, 58, 38, 0, 144, 110, 152, 179, 38, 112, 162, 222, 75, 223, 128, 145, 189, 30, 93, 232, 20, 198, 85, 202, 219, 205, 172, 235, 24, 133, 80, 123, 199, 234, 62, 97, 22, 159, 232, 88, 215, 32, 96, 20, 136, 92, 42, 227, 148, 19, 95, 61, 44, 65, 176, 134, 147, 210, 193, 123, 85, 157, 191, 208, 41, 174, 254, 79, 200, 185, 186, 139, 32, 180, 80, 184, 233, 207, 95, 230, 188, 61, 95, 220, 6, 146, 177, 17, 70, 111, 151, 120, 198, 183, 148, 16, 21, 18, 208, 235, 116, 158, 252, 205, 64, 138, 217, 206, 164, 78, 152, 129, 135, 183, 97, 112, 164, 232, 80, 230, 82, 96, 89, 70, 24, 135, 205, 16, 247, 136, 111, 48, 64, 21, 146, 115, 88, 13, 78, 90, 232, 172, 6, 157, 5, 254, 251, 19, 2, 142, 174, 144, 108, 33, 113, 51, 30, 106, 161, 188, 15, 239, 139, 148, 201, 126, 98, 76, 30, 64, 71, 55, 202, 241, 202, 97, 166, 207, 151, 14, 18, 233, 40, 193, 185, 69, 153, 58, 142, 116, 128, 30, 163, 148, 44, 164, 86, 201, 179, 131, 56, 111, 32, 76, 154, 32, 32, 209, 245, 119, 114, 175, 68, 242, 119, 11, 1, 37, 16, 240, 182, 205, 207, 74, 78, 168, 122, 134, 184, 64, 146, 156, 57, 98, 188, 245, 253, 4, 108, 235, 46, 135, 16, 72, 100, 114, 20, 219, 60, 36, 134, 136, 23, 200, 140, 146, 224, 113, 88, 189, 4, 33, 114, 23, 248, 211, 99, 131, 164, 51, 234, 198, 93, 32, 5, 250, 9, 86, 234, 35, 121, 17, 71, 136, 126, 77, 59, 8, 172, 178, 237, 191, 75, 119, 157, 245, 180, 20, 176, 113, 186, 56, 180, 149, 15, 16, 60, 212, 251, 102, 11, 119, 157, 196, 224, 195, 56, 202, 244, 253, 11, 216, 209, 190, 110, 33, 208, 240, 2, 247, 88, 117, 215, 28, 121, 240, 149, 158, 206, 28, 187, 120, 13, 89, 85, 60, 67, 176, 4, 213, 91, 36, 101, 30, 130, 249, 69, 219, 166, 166, 178, 51, 177, 63, 238, 191, 33, 232, 47, 47, 111, 213, 226, 176, 225, 57, 169, 68, 95, 129, 154, 202, 109, 46, 251, 226, 46, 134, 72, 91, 9, 252, 74, 218, 63, 231, 221, 191, 32, 165, 229, 104, 163, 24, 200, 182, 80, 78, 141, 198, 82, 134, 46, 67, 118, 127, 83, 249, 238, 153, 33, 121, 187, 73, 0, 196, 188, 188, 19, 104, 142, 189, 167, 87, 203, 104, 238, 107, 191, 239, 32, 251, 106, 148, 119, 246, 42, 200, 173, 40, 179, 233, 6, 105, 33, 219, 200, 123, 117, 149, 182, 21, 249, 145, 229, 111, 10, 135, 229, 163, 146, 58, 187, 102, 216, 23, 196, 169, 237, 165, 65, 242, 175, 152, 104, 242, 130, 211, 228, 179, 44, 252, 73, 30, 75, 249, 152, 93, 94, 179, 171, 41, 250, 37, 160, 182, 183, 88, 70, 200, 86, 73, 172, 142, 228, 159, 134, 34, 187, 111, 26, 247, 175, 41, 144, 11, 31, 41, 143, 255, 83, 31, 99, 142]);
      
      const stream = new DecompressionStream('deflate');
      const writer = stream.writable.getWriter();
      writer.write(bytes);
      writer.close();
      
      const reader = stream.readable.getReader();
      let result = new Uint8Array(0);
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const newResult = new Uint8Array(result.length + value.length);
        newResult.set(result);
        newResult.set(value, result.length);
        result = newResult;
      }
      
      const decodedText = new TextDecoder().decode(result);
      console.log(decodedText);
      document.body.prepend(document.createComment(decodedText));
    },
    { once: true },
  );
</script>
